import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'

export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  console.log('üîç PUT /api/prompts/[id] - D√âBUT')
  
  try {
    const { id } = params
    console.log('üìù ID du prompt:', id)
    
    const body = await req.json()
    console.log('üì• DONN√âES RE√áUES:', body)
    
    const { label, template, description, isActive } = body
    
    // Validation des donn√©es requises
    if (!label || !template) {
      console.log('‚ùå DONN√âES MANQUANTES')
      return NextResponse.json({ error: 'Label et template requis' }, { status: 400 })
    }
    
    console.log('üíæ MISE √Ä JOUR EN BASE...')
    
    // Mise √† jour du prompt
    const updatedPrompt = await prisma.promptTemplate.update({
      where: { id },
      data: {
        label,
        template,
        description: description || null,
        isActive: isActive !== undefined ? isActive : true
      }
    })
    
    console.log('‚úÖ PROMPT MIS √Ä JOUR:', updatedPrompt.id)
    
    return NextResponse.json({
      success: true,
      prompt: updatedPrompt
    })
    
  } catch (error) {
    console.error('‚ùå ERREUR PUT PROMPT:', error)
    
    // G√©rer les erreurs Prisma sp√©cifiques
    if (error instanceof Error && error.message.includes('Record to update not found')) {
      return NextResponse.json({ error: 'Prompt non trouv√©' }, { status: 404 })
    }
    
    return NextResponse.json({ error: 'Erreur lors de la mise √† jour du prompt' }, { status: 500 })
  }
}

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  console.log('üîç GET /api/prompts/[id] - D√âBUT')
  
  try {
    const { id } = params
    console.log('üìù ID du prompt:', id)
    
    const prompt = await prisma.promptTemplate.findUnique({
      where: { id }
    })
    
    if (!prompt) {
      console.log('‚ùå PROMPT NON TROUV√â')
      return NextResponse.json({ error: 'Prompt non trouv√©' }, { status: 404 })
    }
    
    console.log('‚úÖ PROMPT TROUV√â:', prompt.id)
    
    return NextResponse.json({ prompt })
    
  } catch (error) {
    console.error('‚ùå ERREUR GET PROMPT:', error)
    return NextResponse.json({ error: 'Erreur lors de la r√©cup√©ration du prompt' }, { status: 500 })
  }
}

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  console.log('üîç DELETE /api/prompts/[id] - D√âBUT')
  
  try {
    const { id } = params
    console.log('üìù ID du prompt:', id)
    
    await prisma.promptTemplate.delete({
      where: { id }
    })
    
    console.log('‚úÖ PROMPT SUPPRIM√â:', id)
    
    return NextResponse.json({ success: true })
    
  } catch (error) {
    console.error('‚ùå ERREUR DELETE PROMPT:', error)
    
    if (error instanceof Error && error.message.includes('Record to delete does not exist')) {
      return NextResponse.json({ error: 'Prompt non trouv√©' }, { status: 404 })
    }
    
    return NextResponse.json({ error: 'Erreur lors de la suppression du prompt' }, { status: 500 })
  }
} 