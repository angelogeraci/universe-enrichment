import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

// GET /api/admin/logs : r√©cup√®re les logs d'enrichissement
export async function GET(req: NextRequest) {
  try {
    console.log('üîç GET /api/admin/logs - D√âBUT')
    
    // V√©rifier que l'utilisateur est admin
    const session = await getServerSession(authOptions)
    if (!session?.user || session.user.role !== 'admin') {
      console.log('‚ùå ACC√àS NON AUTORIS√â - Role:', session?.user?.role)
      return NextResponse.json({ error: 'Acc√®s non autoris√©' }, { status: 403 })
    }
    
    // R√©cup√©rer les logs (le plus r√©cent en premier)
    const logs = await prisma.enrichmentLog.findMany({
      orderBy: { createdAt: 'desc' },
      take: 1 // On ne prend que le plus r√©cent puisqu'on supprime les pr√©c√©dents
    })
    
    console.log('üìã Logs trouv√©s:', logs.length)
    if (logs.length > 0) {
      console.log('üìù Log le plus r√©cent:', {
        id: logs[0].id,
        projectName: logs[0].projectName,
        category: logs[0].category,
        country: logs[0].country,
        model: logs[0].model,
        status: logs[0].responseStatus,
        processingTime: logs[0].processingTime
      })
    }
    
    return NextResponse.json({ logs })
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des logs:', error)
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue'
    return NextResponse.json({ error: 'Erreur serveur', details: errorMessage }, { status: 500 })
  }
}

// DELETE /api/admin/logs : supprimer tous les logs
export async function DELETE(req: NextRequest) {
  try {
    console.log('üîç DELETE /api/admin/logs - D√âBUT')
    
    // V√©rifier que l'utilisateur est admin
    const session = await getServerSession(authOptions)
    if (!session?.user || session.user.role !== 'admin') {
      console.log('‚ùå ACC√àS NON AUTORIS√â - Role:', session?.user?.role)
      return NextResponse.json({ error: 'Acc√®s non autoris√©' }, { status: 403 })
    }
    
    // Supprimer tous les logs
    const deleteResult = await prisma.enrichmentLog.deleteMany({})
    
    console.log('üóëÔ∏è Logs supprim√©s:', deleteResult.count)
    
    return NextResponse.json({ 
      success: true, 
      message: `${deleteResult.count} log(s) supprim√©(s)` 
    })
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des logs:', error)
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue'
    return NextResponse.json({ error: 'Erreur serveur', details: errorMessage }, { status: 500 })
  }
} 