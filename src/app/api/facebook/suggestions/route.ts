import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'

// Initialisation de l'API Facebook
const AccessToken = process.env.FACEBOOK_ACCESS_TOKEN

// Constants pour les mots-cl√©s contextuels
const CONTEXT_KEYWORDS = {
  automotive_brands: ['motor', 'automotive', 'company', 'motors', 'corp', 'group', 'auto', 'manufacturer', 'inc'],
  tech_brands: ['technology', 'software', 'tech', 'systems', 'digital', 'solutions', 'inc', 'corp'],
  fashion_brands: ['fashion', 'clothing', 'apparel', 'wear', 'style', 'brand'],
  sports: ['sport', 'team', 'club', 'football', 'basketball', 'soccer'],
  general: ['company', 'corp', 'inc', 'group', 'brand']
}

// Seuils de pertinence
const RELEVANCE_THRESHOLDS = {
  MINIMUM_ACCEPTABLE: 0.30,  // 30% - Seuil minimum pour consid√©rer une suggestion
  HIGH_CONFIDENCE: 0.60,     // 60% - Seuil pour haute confiance
  VERY_HIGH_CONFIDENCE: 0.80 // 80% - Seuil pour tr√®s haute confiance
}

// Mots-cl√©s pour d√©tecter les marques vs mod√®les dans l'automotive
const BRAND_INDICATORS = {
  automotive: ['motor', 'motors', 'company', 'corp', 'corporation', 'automotive', 'auto', 'group', 'inc', 'ltd', 'gmbh', 'ag', 'spa'],
  model_patterns: /^[A-Z][a-z]+ [A-Z0-9]+[a-z]*$/  // Pattern pour d√©tecter les mod√®les (ex: "Ford Ka", "BMW X5")
}

// Interface pour typer les suggestions avec scoring d√©taill√©
interface FacebookSuggestion {
  label: string
  audience: number
  textualSimilarity: number
  contextualScore: number
  audienceScore: number
  interestTypeScore: number
  brandScore: number  // Nouveau: Score pour privil√©gier les marques
  finalScore: number
  relevanceLevel: 'tr√®s_haute' | 'haute' | 'moyenne' | 'faible' | 'non_pertinente'  // Nouveau: Niveau de pertinence
  matchingReason: string
  isRelevant: boolean  // Nouveau: Indicateur de pertinence
}

// Helper function pour normaliser les termes de recherche (pour calcul de similarit√© uniquement)
function normalizeForSimilarity(term: string): string {
  return term
    .toLowerCase()
    .trim()
    // Supprimer les √©l√©ments entre parenth√®ses pour am√©liorer la similarit√©
    .replace(/\([^)]*\)/g, '')
    .replace(/[^a-z0-9\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
}

// Helper function pour extraire le contenu des parenth√®ses pour l'analyse contextuelle
function extractParenthesesContent(term: string): string[] {
  const matches = term.match(/\(([^)]+)\)/g)
  if (!matches) return []
  
  return matches.map(match => 
    match.replace(/[()]/g, '').toLowerCase().trim()
  ).filter(content => content.length > 0)
}

// Function pour calculer la similarit√© textuelle entre deux strings
function calculateTextualSimilarity(str1: string, str2: string): number {
  const s1 = normalizeForSimilarity(str1)
  const s2 = normalizeForSimilarity(str2)
  
  if (s1 === s2) return 1.0
  
  const longer = s1.length > s2.length ? s1 : s2
  const shorter = s1.length > s2.length ? s2 : s1
  
  if (longer.length === 0) return 1.0
  
  const distance = levenshteinDistance(longer, shorter)
  return (longer.length - distance) / longer.length
}

// Algorithm de distance de Levenshtein
function levenshteinDistance(str1: string, str2: string): number {
  const matrix = []
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i]
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1]
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        )
      }
    }
  }
  
  return matrix[str2.length][str1.length]
}

// Function pour d√©terminer le contexte √† partir du path et de la cat√©gorie
function getContextualKeywords(categoryPath: string[], category: string): string[] {
  const pathStr = categoryPath.join('_').toLowerCase()
  const categoryStr = category.toLowerCase()
  
  console.log(`üîç Analyse contexte: path=[${categoryPath.join(' > ')}], category=${category}`)
  
  // D√©tection automatique du contexte
  if (categoryStr.includes('automotive') || categoryStr.includes('car')) {
    if (pathStr.includes('brand') || pathStr.includes('marque')) {
      console.log(`üéØ Contexte d√©tect√©: automotive_brands`)
      return CONTEXT_KEYWORDS.automotive_brands
    }
  }
  
  if (categoryStr.includes('tech') || categoryStr.includes('technolog')) {
    if (pathStr.includes('brand') || pathStr.includes('marque')) {
      console.log(`üéØ Contexte d√©tect√©: tech_brands`)
      return CONTEXT_KEYWORDS.tech_brands
    }
  }
  
  if (categoryStr.includes('fashion') || categoryStr.includes('mode')) {
    console.log(`üéØ Contexte d√©tect√©: fashion_brands`)
    return CONTEXT_KEYWORDS.fashion_brands
  }
  
  if (categoryStr.includes('sport') || pathStr.includes('sport')) {
    console.log(`üéØ Contexte d√©tect√©: sports`)
    return CONTEXT_KEYWORDS.sports
  }
  
  console.log(`üéØ Contexte d√©tect√©: general (fallback)`)
  return CONTEXT_KEYWORDS.general
}

// Fonction pour calculer le score contextuel bas√© sur la cat√©gorie
function calculateContextualScore(suggestionLabel: string, contextKeywords: string[]): number {
  const suggestion = suggestionLabel.toLowerCase()
  
  console.log(`üîç Analyse contextuelle: "${suggestionLabel}"`)
  
  // Score de base pour les mots-cl√©s contextuels
  let baseScore = 0
  const matchedKeywords = []
  
  for (const keyword of contextKeywords) {
    if (suggestion.includes(keyword.toLowerCase())) {
      baseScore += 0.3
      matchedKeywords.push(keyword)
    }
  }
  
  // Bonus sp√©cifique pour le secteur Automotive
  const automotiveIndicators = [
    // Termes automobiles directs
    'automotive', 'cars', 'vehicles', 'automobile', 'motor', 'auto',
    'driving', 'car', 'vehicle', 'truck', 'suv', 'sedan', 'coupe',
    
    // Composants et services automobiles
    'engine', 'motor company', 'motors', 'manufacturing', 'dealer',
    'garage', 'service', 'parts', 'repair', 'mechanic',
    
    // Industrie automobile
    'assembly', 'factory', 'production', 'manufacturer', 'engineering',
    'design', 'technology', 'innovation', 'performance'
  ]
  
  const automotiveBonus = automotiveIndicators.filter(indicator => 
    suggestion.includes(indicator)
  ).length * 0.25  // +25% par indicateur automobile trouv√©
  
  // Malus pour les secteurs non-automobiles d√©tect√©s
  const nonAutomotiveIndicators = [
    // Mode et beaut√©
    'fashion', 'beauty', 'cosmetics', 'perfume', 'fragrance', 'designer',
    'clothing', 'apparel', 'jewelry', 'accessories', 'luxury fashion',
    'runway', 'collection', 'couture', 'makeup', 'skincare',
    
    // Divertissement
    'entertainment', 'movie', 'film', 'music', 'artist', 'actor',
    'celebrity', 'singer', 'musician', 'band', 'show',
    
    // Technologie non-automobile
    'software', 'app', 'digital', 'internet', 'social media', 'platform',
    'website', 'mobile', 'cloud', 'saas', 'gaming',
    
    // Alimentation et boissons
    'food', 'restaurant', 'cuisine', 'cooking', 'beverage', 'wine',
    'beer', 'coffee', 'tea', 'dining', 'chef',
    
    // Finance et immobilier
    'bank', 'finance', 'investment', 'insurance', 'real estate',
    'property', 'loan', 'trading', 'construction',
    
    // Sant√© et m√©dical
    'medical', 'healthcare', 'pharmaceutical', 'hospital', 'clinic',
    'health', 'medicine', 'doctor', 'treatment'
  ]
  
  const nonAutomotivePenalty = nonAutomotiveIndicators.filter(indicator => 
    suggestion.includes(indicator)
  ).length * 0.4  // -40% par indicateur non-automobile trouv√©
  
  const finalScore = Math.max(0, Math.min(1, baseScore + automotiveBonus - nonAutomotivePenalty))
  
  console.log(`üìä Mots-cl√©s contextuels trouv√©s: [${matchedKeywords.join(', ')}]`)
  if (automotiveBonus > 0) {
    console.log(`üöó Bonus automobile: +${(automotiveBonus * 100).toFixed(0)}%`)
  }
  if (nonAutomotivePenalty > 0) {
    console.log(`‚ö†Ô∏è Malus non-automobile: -${(nonAutomotivePenalty * 100).toFixed(0)}%`)
  }
  console.log(`üéØ Score contextuel final: ${(finalScore * 100).toFixed(0)}%`)
  
  return finalScore
}

// Fonction pour calculer le score de marque (privil√©gier marques vs mod√®les/contextes)
function calculateBrandScore(suggestionLabel: string, query: string, contextKeywords: string[]): number {
  const suggestion = suggestionLabel.toLowerCase()
  const queryLower = query.toLowerCase()
  
  console.log(`üè∑Ô∏è Analyse marque: "${suggestionLabel}" vs "${query}"`)
  
  // D√©tection de marque pure (correspondance exacte)
  if (suggestion === queryLower) {
    console.log(`‚ú® MARQUE PURE d√©tect√©e: correspondance exacte`)
    return 1.0  // Score maximum pour correspondance exacte
  }
  
  // NOUVEAUT√â: D√©tection des descripteurs automobiles POSITIFS
  const automotiveDescriptors = [
    'vehicles', 'cars', 'automotive', 'auto', 'motor company', 'motors',
    'automobile', 'manufacturing', 'group', 'company', 'corp', 'inc',
    'brand', 'manufacturer', 'engineering', 'technology'
  ]
  
  // Si la suggestion contient la marque + descripteur automobile ‚Üí BONUS
  if (suggestion.includes(queryLower)) {
    const hasAutomotiveDescriptor = automotiveDescriptors.some(descriptor => 
      suggestion.includes(`(${descriptor})`) ||
      suggestion.includes(` ${descriptor}`) ||
      suggestion.includes(`-${descriptor}`) ||
      suggestion.endsWith(` ${descriptor}`)
    )
    
    if (hasAutomotiveDescriptor) {
      console.log(`üèÜ MARQUE + DESCRIPTEUR AUTOMOBILE d√©tect√©: BONUS MAXIMUM`)
      return 1.0  // Score maximum pour marque + descripteur automobile
    }
  }
  
  // D√©tection de contextes sp√©cifiques qui diluent la marque (NON automobiles)
  const dilutingContexts = [
    // Contextes sport/divertissement sp√©cifiques
    'in motorsport', 'in racing', 'in sports', 'in sport', 
    'in business', 'in technology', 'in tech', 'in fashion', 'in entertainment',
    'motorsport', 'racing', 'sport', 'sports',
    'fans', 'enthusiasts', 'lovers', 'club', 'community', 'owners',
    'events', 'news', 'magazine', 'media', 'website', 'blog',
    'team', 'racing team', 'official', 'merchandise', 'gear',
    
    // Contextes g√©ographiques qui diluent
    'usa', 'america', 'europe', 'germany', 'italy', 'france', 'uk',
    
    // Services sp√©cifiques (non-marque principale)
    'dealership', 'dealer', 'service', 'parts', 'accessories', 'tuning'
  ]
  
  // V√©rifier si la suggestion contient des contextes diluants (NON automobiles)
  const hasDilutingContext = dilutingContexts.some(context => 
    suggestion.includes(` ${context}`) || 
    suggestion.includes(`(${context})`) ||
    suggestion.includes(`- ${context}`) ||
    suggestion.endsWith(` ${context}`)
  )
  
  if (hasDilutingContext) {
    // Si la suggestion contient la marque exacte + contexte diluant, p√©naliser
    if (suggestion.includes(queryLower)) {
      console.log(`‚ö†Ô∏è MARQUE + CONTEXTE DILUANT d√©tect√©: p√©nalit√© appliqu√©e`)
      return 0.3  // P√©nalit√© pour contexte sp√©cifique non-automotive
    } else {
      console.log(`‚ùå CONTEXTE DILUANT sans marque claire`)
      return 0.1
    }
  }
  
  // D√©tection de mod√®les sp√©cifiques (format "Marque Mod√®le")
  const modelPatterns = [
    // Automotive patterns - mod√®les sp√©cifiques
    /^(\w+)\s+[A-Z0-9]+$/, // BMW X5, Ford F150, Audi A4
    /^(\w+)\s+\w{1,3}$/, // Ford Ka, BMW i3  
    /^(\w+)\s+(GT|RS|AMG|M|S|SE|SL|CL|GL|ML)\b/, // Performance variants
    
    // Tech patterns  
    /^(\w+)\s+(Pro|Max|Mini|Air|Plus)\b/, // Apple Pro, Samsung Max
    /^(\w+)\s+\d+/, // iPhone 14, Galaxy S23
    
    // Product lines (peuvent √™tre acceptables)
    /^(\w+)\s+(Series|Line|Collection|Edition)\b/, // Product lines
  ]
  
  for (const pattern of modelPatterns) {
    const match = suggestion.match(pattern)
    if (match && match[1].toLowerCase() === queryLower) {
      // Exception pour les "Series" qui peuvent √™tre des gammes de marque
      if (suggestion.includes(' series') || suggestion.includes(' line')) {
        console.log(`üìä GAMME DE MARQUE d√©tect√©e: ${match[1]} + gamme`)
        return 0.7 // Score bon pour les gammes de marque
      } else {
        console.log(`üöó MOD√àLE SP√âCIFIQUE d√©tect√©: ${match[1]} + variante`)
        return 0.2 // P√©nalit√© pour mod√®les sp√©cifiques
      }
    }
  }
  
  // Bonus pour mots-cl√©s de marque dans le contexte
  const brandKeywords = ['company', 'corporation', 'corp', 'inc', 'group', 'brand', 'manufacturer']
  const hasBrandKeyword = brandKeywords.some(keyword => 
    suggestion.includes(keyword) || contextKeywords.includes(keyword)
  )
  
  if (hasBrandKeyword && suggestion.includes(queryLower)) {
    console.log(`üè¢ MARQUE OFFICIELLE d√©tect√©e avec mots-cl√©s corporatifs`)
    return 0.9  // Score √©lev√© pour marques avec indicateurs corporatifs
  }
  
  // Score de base selon la similarit√© de nom
  if (suggestion.includes(queryLower)) {
    // Marque pr√©sente mais avec autres mots
    const words = suggestion.split(/[\s\-\_\(\)]+/).filter(w => w.length > 0)
    const queryWords = queryLower.split(/[\s\-\_]+/)
    
    // Si c'est principalement la marque avec peu d'autres mots
    if (words.length <= 3 && words.some(word => queryWords.includes(word))) {
      console.log(`üéØ MARQUE AVEC MODIFICATEURS MINEURS`)
      return 0.7
    } else {
      console.log(`üìù MARQUE AVEC DESCRIPTEURS √âTENDUS`)
      return 0.4
    }
  }
  
  // Aucune correspondance claire de marque
  console.log(`‚ùì PAS DE CORRESPONDANCE MARQUE CLAIRE`)
  return 0.1
}

// Fonction pour d√©terminer le niveau de pertinence
function getRelevanceLevel(finalScore: number): {level: FacebookSuggestion['relevanceLevel'], isRelevant: boolean} {
  if (finalScore >= RELEVANCE_THRESHOLDS.VERY_HIGH_CONFIDENCE) {
    return { level: 'tr√®s_haute', isRelevant: true }
  } else if (finalScore >= RELEVANCE_THRESHOLDS.HIGH_CONFIDENCE) {
    return { level: 'haute', isRelevant: true }
  } else if (finalScore >= RELEVANCE_THRESHOLDS.MINIMUM_ACCEPTABLE) {
    return { level: 'moyenne', isRelevant: true }
  } else if (finalScore >= 0.15) {
    return { level: 'faible', isRelevant: false }
  } else {
    return { level: 'non_pertinente', isRelevant: false }
  }
}

// Fonction pour calculer le score d'audience am√©lior√©
function calculateAudienceScore(audience: number): number {
  if (audience <= 0) return 0
  
  // √âchelle logarithmique pour mieux valoriser les grandes audiences
  // Les audiences > 10M obtiennent des scores tr√®s √©lev√©s
  const logAudience = Math.log10(audience)
  
  let score = 0
  if (audience >= 100000000) {        // 100M+ personnes
    score = 1.0                       // Score maximum
  } else if (audience >= 50000000) {  // 50M+ personnes  
    score = 0.95
  } else if (audience >= 20000000) {  // 20M+ personnes
    score = 0.90
  } else if (audience >= 10000000) {  // 10M+ personnes
    score = 0.85
  } else if (audience >= 5000000) {   // 5M+ personnes
    score = 0.75
  } else if (audience >= 1000000) {   // 1M+ personnes
    score = 0.60
  } else if (audience >= 500000) {    // 500K+ personnes
    score = 0.45
  } else if (audience >= 100000) {    // 100K+ personnes
    score = 0.30
  } else if (audience >= 50000) {     // 50K+ personnes
    score = 0.20
  } else if (audience >= 10000) {     // 10K+ personnes
    score = 0.10
  } else {                            // < 10K personnes
    score = 0.05
  }
  
  console.log(`üìä Audience ${audience.toLocaleString()} ‚Üí Score: ${(score * 100).toFixed(0)}%`)
  return score
}

// Fonction pour rechercher des int√©r√™ts Facebook avec scoring contextuel avanc√©
async function getFacebookInterestSuggestions(query: string, country: string, categoryPath: string[], category: string): Promise<FacebookSuggestion[]> {
  if (!AccessToken) {
    throw new Error('FACEBOOK_ACCESS_TOKEN non d√©fini')
  }

  console.log(`üîç D√âBUT PROCESSUS - Recherche suggestions Facebook`)
  console.log(`üìã INPUT: query="${query}", country=${country}`)
  console.log(`üìÇ Path: [${categoryPath.join(' > ')}]`)
  console.log(`üè∑Ô∏è Cat√©gorie: ${category}`)

  // √âTAPE 1: D√©terminer le contexte √† partir du path et cat√©gorie
  const contextKeywords = getContextualKeywords(categoryPath, category)
  
  // √âTAPE 2: Recherche d'int√©r√™ts via Graph API
  const searchUrl = `https://graph.facebook.com/v18.0/search?type=adinterest&q=${encodeURIComponent(query)}&limit=15&access_token=${AccessToken}`
  
  console.log(`üåê Appel Facebook API: ${searchUrl.replace(AccessToken, '***')}`)
  
  const searchResponse = await fetch(searchUrl)
  const searchData = await searchResponse.json()

  if (searchData.error) {
    console.error('‚ùå Erreur recherche Facebook:', searchData.error)
    throw new Error(`Erreur Facebook API: ${searchData.error.message}`)
  }

  console.log(`‚úÖ Facebook API: ${searchData.data?.length || 0} int√©r√™ts trouv√©s`)

  if (!searchData.data || searchData.data.length === 0) {
    console.log('‚ö†Ô∏è Aucun int√©r√™t trouv√©')
    return []
  }

  // √âTAPE 3: Calcul des scores pour chaque suggestion
  const suggestions: FacebookSuggestion[] = []

  for (const interest of searchData.data) {
    console.log(`\nüîç ANALYSE: "${interest.name}"`)
    
    // Score 1: Similarit√© textuelle
    const textualSimilarity = calculateTextualSimilarity(query, interest.name)
    console.log(`üìù Similarit√© textuelle: ${(textualSimilarity * 100).toFixed(0)}%`)
    
    // Score 2: Pertinence contextuelle  
    const contextualScore = calculateContextualScore(interest.name, contextKeywords)
    
    // Score 3: Nouveau - Score marque/mod√®le
    const brandScore = calculateBrandScore(interest.name, query, contextKeywords)
    
    // Score 4: Score d'audience - Correction pour Facebook API
    const lowerBound = interest.audience_size_lower_bound || 0
    const upperBound = interest.audience_size_upper_bound || 0
    const audience = lowerBound > 0 && upperBound > 0 ? Math.round((lowerBound + upperBound) / 2) : 0
    
    const audienceScore = calculateAudienceScore(audience)
    console.log(`üë• Audience: ${lowerBound.toLocaleString()}-${upperBound.toLocaleString()} ‚Üí Moyenne: ${audience.toLocaleString()} ‚Üí Score: ${(audienceScore * 100).toFixed(0)}%`)
    
    // Score 5: Type d'int√©r√™t (privil√©gier "interest")
    const interestTypeScore = interest.type === 'interest' ? 1.0 : 0.7
    console.log(`üéØ Type: ${interest.type} ‚Üí Score: ${(interestTypeScore * 100).toFixed(0)}%`)
    
    // SCORE FINAL POND√âR√â AM√âLIOR√â - CORRECTION PORSCHE
    const finalScore = (
      textualSimilarity * 0.10 +      // 10% - Similarit√© textuelle 
      contextualScore * 0.20 +        // 20% - Pertinence contextuelle (R√âDUIT pour √©viter sur-pond√©ration)
      brandScore * 0.30 +             // 30% - Score marque (AUGMENT√â pour privil√©gier marques pures)
      audienceScore * 0.35 +          // 35% - Taille audience (MAJORIT√â - pour privil√©gier grandes audiences)
      interestTypeScore * 0.05        // 5% - Type d'int√©r√™t
    )
    
    // P√âNALIT√â SECTORIELLE: D√©tecter les secteurs incompatibles
    let sectorPenalty = 0
    const suggestionLower = interest.name.toLowerCase()
    
    // Pour le secteur Automotive, p√©naliser fortement les secteurs non-automobiles
    if (contextKeywords.some(k => ['automotive', 'cars', 'vehicles'].includes(k.toLowerCase()))) {
      const nonAutomotiveSectors = [
        // Mode & Beaut√© (Tom Ford, etc.)
        'tom ford', 'giorgio armani', 'calvin klein', 'versace', 'prada', 'gucci',
        'cosmetics', 'perfume', 'fragrance', 'makeup', 'beauty', 'fashion', 'clothing',
        
        // Divertissement & C√©l√©brit√©s  
        'entertainment', 'celebrity', 'music', 'singer', 'actor', 'film', 'movie',
        'tv show', 'series', 'band', 'artist', 'performer',
        
        // Tech & Digital
        'software', 'app', 'digital platform', 'website', 'social media', 'tech company',
        
        // Autres secteurs
        'restaurant', 'food', 'cooking', 'sports team', 'football club', 'basketball'
      ]
      
      for (const sector of nonAutomotiveSectors) {
        if (suggestionLower.includes(sector)) {
          sectorPenalty = 0.85  // P√©nalit√© de 85% pour secteurs incompatibles
          console.log(`üö´ P√âNALIT√â SECTORIELLE: "${interest.name}" contient "${sector}" - ${sectorPenalty * 100}% de p√©nalit√©`)
          break
        }
      }
    }
    
    // BONUS SP√âCIAL: Correspondance exacte de nom (sans contexte) MAIS avec validation sectorielle
    let exactMatchBonus = 0
    if (interest.name.toLowerCase() === query.toLowerCase() && sectorPenalty === 0) {
      exactMatchBonus = 0.15  // Bonus r√©duit √† 15% et seulement si pas de conflit sectoriel
      console.log(`üéØ BONUS CORRESPONDANCE EXACTE (valid√©e): +${exactMatchBonus}`)
    } else if (interest.name.toLowerCase() === query.toLowerCase() && sectorPenalty > 0) {
      console.log(`‚ùå CORRESPONDANCE EXACTE REJET√âE: conflit sectoriel d√©tect√©`)
    }
    
    // Application de la p√©nalit√© sectorielle
    const finalScoreWithPenalty = Math.max(0, finalScore - sectorPenalty + exactMatchBonus)
    
    // D√©termination du niveau de pertinence
    const relevance = getRelevanceLevel(finalScoreWithPenalty)
    
    // Raison du matching pour tra√ßabilit√©
    let matchingReason = ''
    if (textualSimilarity > 0.8) matchingReason += 'Similarit√© textuelle √©lev√©e. '
    if (contextualScore > 0.3) matchingReason += 'Contexte pertinent. '
    if (brandScore > 0.5) matchingReason += 'Marque principale d√©tect√©e. '
    if (brandScore < 0.2) matchingReason += 'Possiblement un mod√®le sp√©cifique. '
    if (audienceScore > 0.5) matchingReason += 'Grande audience. '
    if (interestTypeScore === 1.0) matchingReason += 'Type interest. '
    if (!matchingReason) matchingReason = 'Correspondance basique.'
    
    // Ajout du niveau de pertinence dans la raison
    matchingReason += ` [${relevance.level.toUpperCase()}]`
    
    console.log(`üéØ SCORE FINAL: ${(finalScoreWithPenalty * 100).toFixed(0)}% - ${relevance.level} - ${matchingReason}`)
    if (!relevance.isRelevant) {
      console.log(`‚ö†Ô∏è SUGGESTION NON PERTINENTE (< ${(RELEVANCE_THRESHOLDS.MINIMUM_ACCEPTABLE * 100).toFixed(0)}%)`)
    }
    
    suggestions.push({
      label: interest.name,
      audience,
      textualSimilarity,
      contextualScore,
      audienceScore,
      interestTypeScore,
      brandScore,
      finalScore: finalScoreWithPenalty,
      relevanceLevel: relevance.level,
      isRelevant: relevance.isRelevant,
      matchingReason: matchingReason.trim()
    })
  }

  // √âTAPE 4: Tri par score final d√©croissant
  const sortedSuggestions = suggestions.sort((a, b) => b.finalScore - a.finalScore)
  
  console.log(`\nüèÜ TOP 5 SUGGESTIONS:`)
  sortedSuggestions.slice(0, 5).forEach((suggestion, index) => {
    const relevanceIcon = suggestion.isRelevant ? '‚úÖ' : '‚ùå'
    console.log(`${index + 1}. ${relevanceIcon} "${suggestion.label}" - ${(suggestion.finalScore * 100).toFixed(0)}% (${suggestion.relevanceLevel})`)
  })

  // Statistiques de pertinence
  const relevantCount = sortedSuggestions.filter(s => s.isRelevant).length
  const irrelevantCount = sortedSuggestions.length - relevantCount
  console.log(`\nüìä STATISTIQUES: ${relevantCount} pertinentes, ${irrelevantCount} non pertinentes`)

  return sortedSuggestions
}

// POST endpoint pour r√©cup√©rer les suggestions Facebook
export async function POST(request: NextRequest) {
  try {
    const { critereId, query, country, adAccountId } = await request.json()
    
    console.log(`üîç RECHERCHE SUGGESTIONS FACEBOOK: "${query}" pour ${country}`)
    
    // R√©cup√©ration des d√©tails du crit√®re avec path et cat√©gorie
    const critere = await prisma.critere.findUnique({
      where: { id: critereId }
    })
    
    if (!critere) {
      return NextResponse.json({ error: 'Crit√®re non trouv√©' }, { status: 404 })
    }
    
    console.log(`üìã Crit√®re trouv√©: ${critere.label}`)
    console.log(`üìÇ CategoryPath: [${critere.categoryPath.join(' > ')}]`)
    console.log(`üè∑Ô∏è Category: ${critere.category}`)
    
    // Suppression des anciennes suggestions
    await prisma.suggestionFacebook.deleteMany({
      where: { critereId }
    })
    
    // Recherche des nouvelles suggestions avec algorithme contextuel
    const suggestions = await getFacebookInterestSuggestions(
      query, 
      country, 
      critere.categoryPath as string[], 
      critere.category
    )
    
    if (suggestions.length === 0) {
      console.log('‚ö†Ô∏è Aucune suggestion trouv√©e')
      return NextResponse.json({ 
        message: 'Aucune suggestion trouv√©e',
        suggestions: [] 
      })
    }
    
    // Sauvegarde des suggestions en base
    const savedSuggestions = []
    let bestMatch = null
    
    console.log(`\nüíæ SAUVEGARDE ${suggestions.length} SUGGESTIONS:`)
    
    for (const suggestion of suggestions) {
      const saved = await prisma.suggestionFacebook.create({
        data: {
          critereId,
          label: suggestion.label,
          audience: suggestion.audience,
          similarityScore: Math.round(suggestion.finalScore * 100),
          isBestMatch: false,
          isSelectedByUser: false
        }
      })
      
      savedSuggestions.push(saved)
      
      // Garder le meilleur match PERTINENT pour le marquer
      if (suggestion.isRelevant && (!bestMatch || suggestion.finalScore > bestMatch.finalScore)) {
        bestMatch = { ...saved, finalScore: suggestion.finalScore, relevanceLevel: suggestion.relevanceLevel }
      }
      
      const relevanceIcon = suggestion.isRelevant ? '‚úÖ' : '‚ùå'
      const relevanceNote = suggestion.isRelevant ? '' : ' (NON PERTINENTE)'
      console.log(`${relevanceIcon} ${suggestion.label}: ${suggestion.audience.toLocaleString()} personnes (${Math.round(suggestion.finalScore * 100)}% - ${suggestion.relevanceLevel})${relevanceNote}`)
    }
    
    // Marquer le meilleur match pertinent
    if (bestMatch) {
      await prisma.suggestionFacebook.update({
        where: { id: bestMatch.id },
        data: { isBestMatch: true }
      })
      console.log(`üéØ Meilleure suggestion PERTINENTE: "${bestMatch.label}" (${Math.round(bestMatch.finalScore * 100)}% - ${bestMatch.relevanceLevel})`)
    } else {
      console.log(`‚ö†Ô∏è AUCUNE SUGGESTION PERTINENTE TROUV√âE (toutes < ${(RELEVANCE_THRESHOLDS.MINIMUM_ACCEPTABLE * 100).toFixed(0)}%)`)
    }
    
    // Statistiques finales
    const relevantSuggestions = suggestions.filter(s => s.isRelevant)
    const irrelevantSuggestions = suggestions.filter(s => !s.isRelevant)
    
    console.log(`\nüéâ PROCESSUS TERMIN√â:`)
    console.log(`   ‚úÖ ${relevantSuggestions.length} suggestions pertinentes`)
    console.log(`   ‚ùå ${irrelevantSuggestions.length} suggestions non pertinentes`)
    console.log(`   üéØ Meilleur match: ${bestMatch ? bestMatch.label : 'Aucun'}`)
    
    return NextResponse.json({ 
      message: 'Suggestions trouv√©es avec succ√®s',
      suggestions: savedSuggestions,
      bestMatch: bestMatch?.label,
      totalFound: savedSuggestions.length,
      relevantCount: relevantSuggestions.length,
      irrelevantCount: irrelevantSuggestions.length,
      qualityScore: relevantSuggestions.length > 0 ? Math.round((relevantSuggestions.length / suggestions.length) * 100) : 0
    })
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche des suggestions Facebook:', error)
    return NextResponse.json({ 
      error: 'Erreur lors de la recherche des suggestions Facebook',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}

// GET endpoint pour r√©cup√©rer les suggestions d'un crit√®re
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const critereId = searchParams.get('critereId')
    
    if (!critereId) {
      return NextResponse.json({ error: 'critereId requis' }, { status: 400 })
    }
    
    const suggestions = await prisma.suggestionFacebook.findMany({
      where: { critereId },
      orderBy: { similarityScore: 'desc' }
    })
    
    return NextResponse.json({ suggestions })
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des suggestions:', error)
    return NextResponse.json({ 
      error: 'Erreur lors de la r√©cup√©ration des suggestions' 
    }, { status: 500 })
  }
} 