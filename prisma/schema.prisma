// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(user)
  categoryLists CategoryList[]        @relation("OwnerCategoryLists")
  sharedCategoryLists CategoryList[]  @relation("SharedCategoryLists")
  projects  Project[]
}

enum Role {
  admin
  user
}

model CategoryList {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  createdAt   DateTime    @default(now())
  isPublic    Boolean     @default(false)
  owner       User        @relation("OwnerCategoryLists", fields: [ownerId], references: [id])
  ownerId     String
  sharedWith  User[]      @relation("SharedCategoryLists")
  categories  Category[]
  projects    Project[]
}

model Category {
  id             String   @id @default(cuid())
  name           String
  path           String
  andCriteria    String[]
  categoryList   CategoryList @relation(fields: [categoryListId], references: [id])
  categoryListId String
}

model Project {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  country       String
  searchType    String
  categoryList  CategoryList @relation(fields: [categoryListId], references: [id])
  categoryListId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  owner         User     @relation(fields: [ownerId], references: [id])
  ownerId       String
  criteres      Critere[]
  enrichmentStatus String @default("pending")
}

model PromptTemplate {
  id          String   @id @default(cuid())
  label       String
  template    String
  description String?
  searchType  String?  // "origin" ou "presence" 
  model       String?  @default("gpt-4o") // Modèle OpenAI à utiliser
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Critere {
  id            String   @id @default(cuid())
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String
  category      String
  categoryPath  String[]
  country       String
  label         String
  status        String
  note          String?
  suggestions   SuggestionFacebook[]
  selectedSuggestionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SuggestionFacebook {
  id              String   @id @default(cuid())
  critere         Critere  @relation(fields: [critereId], references: [id])
  critereId       String
  label           String
  audience        Int
  similarityScore Float
  isBestMatch     Boolean  @default(false)
  isSelectedByUser Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model EnrichmentLog {
  id               String   @id @default(cuid())
  projectId        String
  projectName      String
  category         String
  country          String
  searchType       String
  model            String
  promptSent       String   // Le prompt complet envoyé à OpenAI
  responseRaw      String   // La réponse brute d'OpenAI
  responseStatus   String   // "success" ou "error"
  processingTime   Int      // Temps de traitement en ms
  createdAt        DateTime @default(now())
}
