generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  password            String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  role                Role            @default(user)
  categoryLists       CategoryList[]  @relation("OwnerCategoryLists")
  interestChecks      InterestCheck[]
  projects            Project[]
  sharedCategoryLists CategoryList[]  @relation("SharedCategoryLists")
}

model CategoryList {
  id         String     @id @default(cuid())
  name       String
  createdAt  DateTime   @default(now())
  isPublic   Boolean    @default(false)
  ownerId    String
  slug       String     @unique
  categories Category[]
  owner      User       @relation("OwnerCategoryLists", fields: [ownerId], references: [id])
  projects   Project[]
  sharedWith User[]     @relation("SharedCategoryLists")
}

model Category {
  id             String       @id @default(cuid())
  name           String
  path           String
  andCriteria    String[]
  categoryListId String
  categoryList   CategoryList @relation(fields: [categoryListId], references: [id])
}

model Project {
  id                   String       @id @default(cuid())
  name                 String
  description          String
  country              String
  searchType           String
  categoryListId       String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  ownerId              String
  slug                 String       @unique
  enrichmentStatus     String       @default("pending")
  currentCategoryIndex Int?         @default(0)
  pausedAt             DateTime?
  criteres             Critere[]
  categoryList         CategoryList @relation(fields: [categoryListId], references: [id])
  owner                User         @relation(fields: [ownerId], references: [id])
}

model InterestCheck {
  id                   String     @id @default(cuid())
  name                 String
  slug                 String     @unique
  description          String?
  country              String     @default("BE")
  fileName             String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  ownerId              String
  enrichmentStatus     String     @default("pending")
  currentInterestIndex Int?       @default(0)
  pausedAt             DateTime?
  interests            Interest[]
  owner                User       @relation(fields: [ownerId], references: [id])
}

model Interest {
  id                   String               @id @default(cuid())
  interestCheckId      String
  name                 String
  country              String
  status               String               @default("pending")
  note                 String?
  selectedSuggestionId String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  interestCheck        InterestCheck        @relation(fields: [interestCheckId], references: [id])
  suggestions          InterestSuggestion[]
}

model InterestSuggestion {
  id               String   @id @default(cuid())
  interestId       String
  label            String
  facebookId       String?
  audience         Int
  similarityScore  Float
  isBestMatch      Boolean  @default(false)
  isSelectedByUser Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  interest         Interest @relation(fields: [interestId], references: [id])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  label       String
  template    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  searchType  String?
  model       String?  @default("gpt-4o")
}

model Critere {
  id                   String               @id @default(cuid())
  projectId            String
  category             String
  categoryPath         String[]
  country              String
  label                String
  status               String
  note                 String?
  selectedSuggestionId String?
  isHidden             Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  project              Project              @relation(fields: [projectId], references: [id])
  suggestions          SuggestionFacebook[]
}

model SuggestionFacebook {
  id               String   @id @default(cuid())
  critereId        String
  label            String
  audience         Int
  similarityScore  Float
  isBestMatch      Boolean  @default(false)
  isSelectedByUser Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  facebookId       String?
  critere          Critere  @relation(fields: [critereId], references: [id])
}

model EnrichmentLog {
  id             String   @id @default(cuid())
  projectId      String
  projectName    String
  category       String
  country        String
  searchType     String
  model          String
  promptSent     String
  responseRaw    String
  responseStatus String
  processingTime Int
  createdAt      DateTime @default(now())
}

model AppSetting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model FacebookSuggestionCache {
  id          String   @id @default(cuid())
  cacheKey    String   @unique
  suggestions String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  admin
  user
}
